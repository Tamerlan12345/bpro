
document.addEventListener('DOMContentLoaded', () => {

    const API_URL = '/api/generate';


    let suggestions = [];
    let currentDiagramScale = 1;


    const processDescriptionInput = document.getElementById('process-description');
    const improveBtn = document.getElementById('improve-btn');
    const stepCounter = document.getElementById('step-counter');
    const userPromptInput = document.getElementById('user-prompt');
    const suggestionsContainer = document.getElementById('suggestions-container');
    const suggestionsControls = document.getElementById('suggestions-controls');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    const selectionCounter = document.getElementById('selection-counter');
    const applyImprovementsBtn = document.getElementById('apply-improvements-btn');
    const diagramPlaceholder = document.getElementById('diagram-placeholder');
    const placeholderContent = document.querySelector('.placeholder-content');
    const renderDiagramBtn = document.getElementById('render-diagram-btn');
    const diagramContainer = document.getElementById('diagram-container');
    const diagramToolbar = document.getElementById('diagram-toolbar');
    const zoomInBtn = document.getElementById('zoom-in-btn');
    const zoomOutBtn = document.getElementById('zoom-out-btn');
    const downloadPngBtn = document.getElementById('download-png-btn');
    const downloadSvgBtn = document.getElementById('download-svg-btn');
    const resultsBlock = document.querySelector('.results-block');


    mermaid.initialize({
        startOnLoad: false,
        theme: 'base',
        fontFamily: 'inherit',
        flowchart: { nodeSpacing: 50, rankSpacing: 60 },
        themeVariables: {
            primaryColor: '#FFFFFF',
            primaryTextColor: '#212529',
            primaryBorderColor: '#333333',
            lineColor: '#333333',
        }
    });


    processDescriptionInput.addEventListener('input', updateStepCounter);
    improveBtn.addEventListener('click', handleImproveRequest);
    applyImprovementsBtn.addEventListener('click', handleApplyImprovements);
    suggestionsContainer.addEventListener('click', handleCardSelection);
    selectAllCheckbox.addEventListener('change', handleSelectAll);
    renderDiagramBtn.addEventListener('click', handleRenderDiagram);
    zoomInBtn.addEventListener('click', () => zoomDiagram(1.1));
    zoomOutBtn.addEventListener('click', () => zoomDiagram(0.9));
    downloadPngBtn.addEventListener('click', downloadDiagramPNG);
    downloadSvgBtn.addEventListener('click', downloadDiagramSVG);


    function updateStepCounter() {
        const text = processDescriptionInput.value;
        const lines = text.split('\n').filter(line => line.trim() !== '');
        stepCounter.textContent = `${lines.length} —à–∞–≥–æ–≤`;
        improveBtn.disabled = lines.length === 0;
    }

    async function handleImproveRequest() {
        const description = processDescriptionInput.value;
        const userPrompt = userPromptInput.value;
        if (!description.trim()) return;

        setButtonLoading(improveBtn, true, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
        suggestionsContainer.innerHTML = '<div class="loading-overlay"><div class="spinner"></div></div>';
        resultsBlock.innerHTML = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2><p>–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...</p>`;

        try {
            const rawJsonResponse = await getOptimizationSuggestions(description, userPrompt);
            const cleanedJson = rawJsonResponse.replace(/^```json\s*|```$/g, '').trim();
            const analysisResult = JSON.parse(cleanedJson);

            if (analysisResult.full_process_text) {
                processDescriptionInput.value = analysisResult.full_process_text;
                updateStepCounter();
                resultsBlock.innerHTML = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2><p style="color: var(--primary-color);">‚úì –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω –ò–ò. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è.</p>`;
            }
            suggestions = analysisResult.suggestions || [];
            renderSuggestions(suggestions);
        } catch (error) {
            const errorMsg = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏.';
            resultsBlock.innerHTML = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2><p class="placeholder-text error">${errorMsg}</p>`;
            suggestionsContainer.innerHTML = `<p class="placeholder-text error">${errorMsg}</p>`;
            console.error('–û–®–ò–ë–ö–ê:', error);
        } finally {
            setButtonLoading(improveBtn, false, '‚ú® –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è');
        }
    }

    async function handleApplyImprovements() {
        const selectedIndices = getSelectedSuggestionIndices();
        if (selectedIndices.length === 0) return;

        const selectedSuggestions = selectedIndices.map(index => suggestions[index]);
        setButtonLoading(applyImprovementsBtn, true, '–ü—Ä–∏–º–µ–Ω—è—é...');
        resultsBlock.innerHTML = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2><p>–û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏...</p>`;

        try {
            const optimizedProcess = await getOptimizedProcess(processDescriptionInput.value, selectedSuggestions);
            processDescriptionInput.value = optimizedProcess;
            updateStepCounter();
            resultsBlock.innerHTML = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2><p style="color: var(--accent-color); font-weight: 600;">‚úì –£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ—Ü–µ—Å—Å –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω.</p>`;
            suggestionsContainer.innerHTML = '<p class="placeholder-text">–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ö–µ–º—É.</p>';
            suggestionsControls.style.display = 'none';
            applyImprovementsBtn.disabled = true;
        } catch (error) {
            resultsBlock.innerHTML = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2><p class="placeholder-text error">–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è.</p>`;
            console.error('–û–®–ò–ë–ö–ê:', error);
        } finally {
            setButtonLoading(applyImprovementsBtn, false, '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è');
        }
    }

    async function handleRenderDiagram() {
        const description = processDescriptionInput.value;
        if (!description.trim()) return;

        placeholderContent.style.display = 'none';
        diagramContainer.style.display = 'flex';
        diagramContainer.innerHTML = '<div class="loading-overlay"><div class="spinner"></div></div>';
        diagramToolbar.style.display = 'none';

        try {
            const mermaidCode = await getMermaidCode(description);
            await renderDiagram(mermaidCode);
            diagramToolbar.style.display = 'flex';
        } catch (error) {
            diagramContainer.innerHTML = '<p class="placeholder-text error">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ö–µ–º—É.</p>';
            console.error('–û–®–ò–ë–ö–ê:', error);
        }
    }


    function handleCardSelection(e) {
        const card = e.target.closest('.suggestion-card');
        if (card) {
            card.classList.toggle('selected');
            updateSelectionState();
        }
    }

    function handleSelectAll() {
        const isChecked = selectAllCheckbox.checked;
        document.querySelectorAll('.suggestion-card').forEach(card => card.classList.toggle('selected', isChecked));
        updateSelectionState();
    }

    function updateSelectionState() {
        const selectedCards = document.querySelectorAll('.suggestion-card.selected');
        const totalCards = document.querySelectorAll('.suggestion-card').length;
        selectionCounter.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${selectedCards.length} –∏–∑ ${totalCards}`;
        applyImprovementsBtn.disabled = selectedCards.length === 0;
        if (totalCards > 0) {
            selectAllCheckbox.checked = selectedCards.length === totalCards;
        }
    }

    function setButtonLoading(button, isLoading, loadingText) {
        if (!button.dataset.originalText) {
            button.dataset.originalText = button.innerHTML;
        }
        button.disabled = isLoading;
        if (isLoading) {
            button.innerHTML = `<span class="spinner"></span> ${loadingText}`;
        } else {
            button.innerHTML = button.dataset.originalText;
        }
    }

    function renderSuggestions(suggestionsData) {
        if (!suggestionsData || suggestionsData.length === 0) {
            suggestionsContainer.innerHTML = '<p class="placeholder-text">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>';
            suggestionsControls.style.display = 'none';
            return;
        }
        const categoryIcons = { '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è': '‚öôÔ∏è', '–£–ø—Ä–æ—â–µ–Ω–∏–µ': '‚ú®', '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è': 'üóëÔ∏è', '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è': 'üëÅÔ∏è', '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤': 'üõ°Ô∏è', 'default': 'üí°' };
        suggestionsContainer.innerHTML = suggestionsData.map((s, index) => `
            <div class="suggestion-card" data-index="${index}">
                <div class="suggestion-header">
                    <span class="suggestion-icon">${categoryIcons[s.category] || categoryIcons['default']}</span>
                    <h4 class="suggestion-category">${s.category}</h4>
                </div>
                <p class="suggestion-text">${s.suggestion_text}</p>
                ${s.benefit ? `<small class="suggestion-benefit"><b>–í—ã–≥–æ–¥–∞:</b> ${s.benefit}</small>` : ''}
            </div>`).join('');
        suggestionsControls.style.display = 'flex';
        updateSelectionState();
    }

    function getSelectedSuggestionIndices() {
        return Array.from(document.querySelectorAll('.suggestion-card.selected')).map(card => parseInt(card.dataset.index, 10));
    }

    async function renderDiagram(mermaidCode) {
        const id = `mermaid-graph-${Date.now()}`;
        diagramContainer.innerHTML = `<div id="${id}">${mermaidCode}</div>`;
        await mermaid.run({ nodes: [document.getElementById(id)] });
        const svg = diagramContainer.querySelector('svg');
        if(svg) {
            svg.style.maxWidth = '100%';
            currentDiagramScale = 1;
            zoomDiagram(1);
        }
    }

    function zoomDiagram(factor) {
        const svg = diagramContainer.querySelector('svg');
        if (!svg) return;
        currentDiagramScale *= factor;
        svg.style.transform = `scale(${currentDiagramScale})`;
    }

    function downloadDiagramPNG() {
        const svgElement = diagramContainer.querySelector('svg');
        if (!svgElement) return;
        html2canvas(svgElement, {backgroundColor: null}).then(canvas => {
            const link = document.createElement('a');
            link.download = 'process-diagram.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
        });
    }

    function downloadDiagramSVG() {
        const svgElement = diagramContainer.querySelector('svg');
        if (!svgElement) return;
        const svgData = new XMLSerializer().serializeToString(svgElement);
        const blob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'process-diagram.svg';
        link.click();
        URL.revokeObjectURL(url);
    }


    async function callGeminiAPI(prompt) {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            // The serverless function expects a JSON body with a `prompt` key.
            body: JSON.stringify({ prompt: prompt })
        });
        if (!response.ok) {
            const errorData = await response.json();
            // The user will now see the more specific error message from the backend.
            const errorMessage = errorData.error ? errorData.error.message : 'Unknown API error';
            throw new Error(errorMessage);
        }
        const data = await response.json();
        if (!data.candidates || !data.candidates[0].content) {
            throw new Error('Invalid API response structure from Google');
        }
        return data.candidates[0].content.parts[0].text;
    }

    async function getOptimizationSuggestions(processDescription, userPrompt) {
        const prompt = `–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –º–µ—Ç–æ–¥–æ–ª–æ–≥ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –î–û–ü–û–õ–ù–ò–¢–¨ –∏ –£–õ–£–ß–®–ò–¢–¨ –ø—Ä–æ—Ü–µ—Å—Å. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã, –¥–æ–ø–∏—à–∏ —à–∞–≥–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É–∂–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è. –ò–°–•–û–î–ù–´–ô –ü–†–û–¶–ï–°–°: "${processDescription}". –ö–û–ù–¢–ï–ö–°–¢ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${userPrompt}". –¢–≤–æ–π –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å—Ç–æ–≥–æ JSON —Å –î–í–£–ú–Ø –ö–õ–Æ–ß–ê–ú–ò: 1. "full_process_text": –°—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –ü–û–õ–ù–û–°–¢–¨–Æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π –ø–æ—à–∞–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞. 2. "suggestions": –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç: "category", "suggestion_text", "benefit".`;
        return callGeminiAPI(prompt);
    }

    async function getOptimizedProcess(originalProcess, suggestionsToApply) {
        const suggestionsText = suggestionsToApply.map(s => `- ${s.suggestion_text}`).join('\n');
        const prompt = `–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π —É–ª—É—á—à–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫. –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢: "${originalProcess}". –£–õ–£–ß–®–ï–ù–ò–Ø –î–õ–Ø –í–ù–ï–î–†–ï–ù–ò–Ø: "${suggestionsText}".`;
        return callGeminiAPI(prompt);
    }

    async function getMermaidCode(processDescription) {
        const prompt = `–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –∫–æ–¥ Mermaid.js (—Å–∏–Ω—Ç–∞–∫—Å–∏—Å flowchart TD). –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û –∫–æ–¥ Mermaid. –û–ü–ò–°–ê–ù–ò–ï: "${processDescription}"`;
        return callGeminiAPI(prompt).then(code => code.replace(/```mermaid/g, '').replace(/```/g, '').trim());
    }


    updateStepCounter();
});

